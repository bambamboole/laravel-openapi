openapi: 3.1.0
info:
  title: 'My API'
  description: 'Developer API'
  contact:
    name: 'API Support'
    url: 'https://.example.com'
    email: api@example.com
  version: 1.0.0
servers:
  -
    url: 'https://.example.com'
    description: 'Your API environment'
paths:
  /api/list:
    get:
      description: 'List resources'
      operationId: 'GET::api-list'
      parameters:
        -
          name: filter
          in: query
          description: 'The filter parameter is used to filter the results of the given endpoint'
          required: false
          style: deepObject
          schema:
            properties:
              id:
                description: 'Filter for id property of the given resource.'
                type: array
                items:
                  type: integer
                  example: 12
              status:
                description: 'Filter for status property of the given resource.'
                type: array
                items:
                  enum: [active, inactive, pending]
              name:
                description: 'Filter for name property of the given resource.'
                type: array
                items:
                  type: string
                  example: something
              from_collection_1:
                description: 'Filter for from_collection_1 property of the given resource.'
                type: array
                items:
                  type: integer
                  example: 12
              from_collection_2:
                description: 'Filter for from_collection_2 property of the given resource.'
                type: array
                items:
                  type: string
                  example: Test
            type: object
        -
          name: include
          in: query
          required: false
          explode: false
          schema:
            type: array
            items:
              type: string
              enum:
                - foo
                - bar
        -
          name: per_page
          in: query
          description: 'Number of items per page. Default: 15, Max: 1337'
          required: false
          schema:
            type: integer
            example: 15
        -
          name: page
          in: query
          description: 'Page number.'
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 'List resources'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/ListResource' } }
                  meta: { properties: { current_page: { type: integer }, from: { type: integer }, path: { type: string }, per_page: { type: integer }, last_page: { type: integer }, to: { type: integer }, total: { type: integer }, links: { type: array, items: { type: object } } }, type: object }
                type: object
        '401':
          description: Unauthorized
        '403':
          description: Unauthorized
components:
  schemas:
    ListResource:
      required:
        - id
        - created_at
        - updated_at
      properties:
        id:
          type: integer
        status:
          enum:
            - active
            - inactive
            - pending
        created_at:
          type: date-time
        updated_at:
          type: date-time
      type: object
      additionalProperties: false
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
security:
  -
    BearerAuth: []
